# 蔚澜智越(Verdance Cognition OS) 项目规则

## 项目架构与模块

- 项目采用五层体系架构，各模块职责清晰分离
- 核心模块命名遵循"蔚澜+功能"格式：蔚澜策、蔚澜行、蔚澜源、蔚澜境、蔚澜鉴
- 子模块命名遵循"XX+功能"模式，如：策元、策链、策图、策忆
- 系统模块关系图需使用mermaid格式表示，保持一致性

```
蔚澜策：规划层 - 负责规划与目标分解
蔚澜行：调用层 - 负责任务调度与工具调用
蔚澜源：知识层 - 负责企业知识和向量存储
蔚澜境：交互层 - 负责多模态交互界面
蔚澜鉴：控制层 - 负责安全与合规
```

## 命名规范

### 文件与目录
- 文档使用Markdown格式，命名格式为"序号_文档名称.md"
- 源代码文件按模块组织，遵循各语言最佳实践
- 配置文件使用小写连字符格式，如"config-dev.yaml"

### 代码命名
- 后端API路径遵循RESTful规范，使用复数名词表示资源
- 数据库表命名使用下划线命名法，如"knowledge_base"
- TypeScript/JavaScript变量采用驼峰式命名(camelCase)
- Python代码变量和函数使用蛇形命名法(snake_case)
- 接口和类型定义使用大写驼峰式(PascalCase)

### 特殊术语
- 智能体: Agent或智能代理的中文称呼
- 工具调用: Tool Calling或函数调用功能
- RAG: Retrieval-Augmented Generation，检索增强生成
- 提示词: LLM的输入提示(Prompt)
- Meta-Agent: 协调其他Agent的主控Agent

## 技术栈与实现路径

### 前端
- Next.js + TailwindCSS作为主要前端框架
- 图表与流程可视化使用Mermaid
- 使用TypeScript确保类型安全

### 后端
- FastAPI作为主要API框架
- 使用PostgreSQL存储关系型数据
- 使用Neo4j构建知识图谱
- 使用Weaviate/Qdrant作为向量数据库
- Redis用于缓存和会话管理

### AI与智能体
- 基于OpenAI API与Claude构建智能体
- 使用LangGraph/Autogen/CrewAI进行Agent编排
- 向量检索使用FAISS/Milvus实现

## 工具集与集成

### LLM工具
- 支持多种LLM提供商：OpenAI、Azure OpenAI、Anthropic Claude、Google Gemini、DeepSeek
- 默认使用GPT-4o为图像处理和通用任务
- 使用Claude-3-Sonnet处理长文本或需要细致推理的任务
- 命令行调用示例：
  ```bash
  python tools/llm_api.py --prompt "你的查询内容" --provider openai --model gpt-4o
  ```

### 网页工具
- 网页爬取工具用于获取外部页面内容
  ```bash
  python tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
  ```
- 截图验证工具用于UI测试和内容验证
  ```bash
  python tools/screenshot_utils.py URL --output screenshot.png --width 1200 --height 800
  ```

### 搜索工具
- 搜索引擎工具用于查询实时资料
  ```bash
  python tools/search_engine.py "你的搜索关键词"
  ```
- 结果格式包含URL、标题和摘要，可配合网页爬取工具使用

## 代码模式与最佳实践

### API设计
- 所有API遵循OpenAPI 3.0规范文档化
- 使用一致的错误响应格式和状态码
- API版本在URI路径中指定，如/api/v1/resources
- 应优先使用标准HTTP方法(GET/POST/PUT/PATCH/DELETE)
- 分页参数统一使用page和page_size

### 错误处理
- 使用统一错误响应格式，包含错误码、信息和详情
- 服务端错误需记录详细日志，客户端仅提供安全信息
- 实现请求重试机制，特别是对500和429状态码
- 错误码使用snake_case格式，如invalid_api_key

### 安全实践
- API认证必须使用Bearer令牌或API密钥
- 敏感信息需加密存储，使用AES-256算法
- 所有外部输入需验证和清洗，特别是防止提示词注入
- 实施RBAC(基于角色的访问控制)和资源级权限

### 智能体开发
- 系统提示词需明确定义角色、行为规范和响应格式
- 智能体需关联知识库进行知识增强
- 工具调用需定义清晰的参数规范和错误处理
- 始终记录智能体调用日志用于审计和优化

## 已知挑战与解决方案

### 性能优化
- 大型文档需分块处理，块大小控制在1000字符左右
- 向量检索使用混合搜索(Hybrid Search)提高准确性
- 批量处理API请求减少网络开销
- 实现响应流式传输提升用户体验

### 合规与安全
- 所有智能体输出需经过内容过滤确保安全
- 实现完整审计日志记录所有关键操作
- 敏感数据自动脱敏，特别是个人身份信息
- 定期进行安全评估和风险评估

## 测试与部署

### 测试策略
- 单元测试覆盖核心功能和边界条件
- 集成测试验证模块间交互
- 性能测试确保系统在负载下稳定
- 安全测试包括渗透测试和提示词注入测试

### 测试最佳实践
- 测试文件命名应符合`test_[模块名].py`格式
- 每个模块的测试文件应放在对应模块的tests目录下
- 使用`run_tests.sh`脚本运行特定模块的测试
- 使用`scripts/run_all_tests.sh`脚本执行全部测试
- 测试应覆盖正常流程和异常流程
- 使用pytest的fixture功能创建测试数据和环境
- 测试应独立且可重复执行，不依赖于其他测试的执行顺序
- 集成测试应使用测试专用的数据库和外部服务
- 使用mock对象模拟复杂的外部依赖
- 定期检查测试覆盖率，确保核心功能获得充分测试
- 在CI/CD流水线中集成测试执行
- 测试失败时应提供清晰的错误信息和修复建议
- 所有API接口都应有对应的自动化测试
- 性能敏感模块应包含性能基准测试
- 定期运行全套测试，确保系统整体稳定性

### 测试数据管理
- 使用`scripts/seed_test_data.py`生成测试数据
- 使用`scripts/clean_test_data.py`清理测试数据
- 测试数据应包含典型用例和边缘情况
- 敏感测试数据应使用测试专用的假数据
- 测试完成后应清理所有临时文件和数据
- 定期更新测试数据集以覆盖新功能和边缘情况

### 部署流程
- 使用Docker容器化应用组件
- 采用Kubernetes进行容器编排
- 实现CI/CD自动化部署流水线
- 跨区域部署提高可用性

## 版本与迭代计划

- 遵循语义化版本(SemVer)规范
- 主版本号变更意味着不兼容的API修改
- 次版本号变更添加向后兼容的功能
- 补丁版本号变更为向后兼容的问题修复
- 完整版本规划分为5个Phase，每个阶段2-3周

## 注释与文档

- 使用JSDoc格式编写代码注释
- API端点需完整文档描述参数和响应
- 复杂算法实现需添加详细说明
- 配置项变更需更新相关文档

## 开发工具与辅助功能

### Scratchpad使用指南
- 接到新任务时先审阅Scratchpad内容，必要时清理旧任务内容
- 在Scratchpad中组织思路，分析任务并制定计划
- 使用任务标记跟踪进度：[X] 已完成任务，[ ] 待完成任务
- 完成子任务或里程碑时更新进度
- 定期回顾Scratchpad，保持对任务全局和进度的把握

### 开发辅助工具
- 使用Python虚拟环境(venv)运行工具脚本
- 为调试提供详细的输出信息
- 编辑文件前先阅读其内容
- 多行提交信息时，先写入文件再使用`git commit -F <filename>`提交

### LLM工具集成
- OpenAI模型使用gpt-4o为默认模型
- 使用Claude-3-Sonnet处理较长文本或需要推理的任务
- 在使用国际化查询时注意UTF-8编码处理
- 将调试信息输出到stderr，保持stdout输出干净

### 外部API工具
- 网页爬取工具用于获取外部信息
- 搜索引擎工具用于查询相关资料
- 截图验证工具用于UI测试

## 经验教训

### 通用最佳实践
- 详细记录API调用和响应以便排查问题
- 编辑文件前先检查文件内容
- 处理多行输入时注意格式和编码问题
- 为批处理任务编写专用脚本而非手动操作
- 使用Python虚拟环境(venv)隔离项目依赖
- 添加调试信息到stderr，保持stdout输出干净用于管道集成
- 读取文件内容后再尝试编辑，确保了解现有结构

### 测试相关经验
- 使用pytest的@pytest.mark.parametrize装饰器处理多种测试用例
- 在Docker环境中运行测试时，注意卷挂载和网络配置
- 测试LLM相关功能时，使用较短的模型输出减少测试时间
- 使用环境变量TEST_ENV区分不同测试环境
- 在集成测试中使用测试专用的API密钥和凭证
- 定期检查测试覆盖率报告，关注覆盖率低的模块
- 对于复杂测试场景，创建测试专用的辅助函数
- 测试失败后，使用测试日志和堆栈跟踪快速定位问题
- 测试网络请求时，考虑使用请求记录和重放机制
- 缓存测试数据以加速重复测试的执行

### 项目特定经验
- 使用OpenAI GPT-4o而非旧版模型处理图像相关任务
- 处理国际字符时注意UTF-8编码问题
- 在使用seaborn时使用'seaborn-v0_8'而非'seaborn'作为样式名
- 保持输出格式的一致性，利于管道集成
- 处理搜索结果时确保正确处理不同的字符编码，特别是国际化查询
- Jest测试中，即使所有单独测试通过，测试套件仍可能失败，通常是由于套件级别设置代码或生命周期钩子问题

## Scratchpad

在这里记录当前任务的思路和进度。接到新任务时，先清理旧内容，然后组织思路并规划步骤。

### 任务分析
[这里描述当前任务的目标和要求]

### 执行计划
- [ ] 步骤1：[具体行动]
- [ ] 步骤2：[具体行动]
- [ ] 步骤3：[具体行动]

### 进度跟踪
[这里记录任务执行的进展]

### 笔记和观察
[这里记录在执行过程中的重要发现] 